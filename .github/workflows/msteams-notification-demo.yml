name: Teams Notification Demo

on:
  workflow_dispatch:

jobs:
  build-1:
    runs-on: ubuntu-latest

    steps:
      - name: Build job 1
        run: |
          echo "Simulating a build job 1"
          
  build-2:
    runs-on: ubuntu-latest

    steps:
      - name: Build job 2
        run: |
          echo "Simulating a failure of build job 2"
          exit 1
          
  build-3:
    runs-on: ubuntu-latest

    steps:
      - name: Build job 3
        run: |
          echo "Simulating a build job 3"
          
  notify-microsoft-teams:
    if: always()
    runs-on: ubuntu-latest
    needs: [ build-1, build-2, build-3 ]
    steps:
      - name: Notify Microsoft Teams Channel
        shell: pwsh
        run: |

          $projectName = "Teams Notification Demo"
          $allJobsStatus = "${{ needs.build-1.result }}${{ needs.build-2.result }}${{ needs.build-3.result }}"
          
          # Constants
          $successColor="3fcf3f"
          $failureColor="cf3f3f"
          $warningColor="efef3f"
          $successMessage="Success"
          $failureMessage="Failed"
          $cancelledMessage="Cancelled"
          $skippedMessage="Skipped"
          $finalJobStatus = ""
          
          # Determine build status
          if ($allJobsStatus.Contains("failure")) {
            $finalJobStatus = "failure"
          } elseif ($allJobsStatus.Contains("cancelled")) {
            $finalJobStatus = "cancelled"
          } elseif ($allJobsStatus.Contains("skipped")) {
            $finalJobStatus = "skipped"
          } else {
            $finalJobStatus = "success"
          }
          
          $colorToUse = $failureColor
          $messageToUse = "Unknown status"
          
          switch ($finalJobStatus)
          {
            "success" {
              $colorToUse = $successColor
              $messageToUse = $successMessage
              Break
            }
            "failure" {
              $colorToUse = $failureColor
              $messageToUse = $failureMessage
              Break            
            }
            "cancelled" {
              $colorToUse = $warningColor
              $messageToUse = $cancelledMessage
              Break
            }
            "skipped" {
              $colorToUse = $warningColor
              $messageToUse = $skippedMessage
              Break
            }
          }
          
          # Note: For production, consider using a minified version of the JSON.
          $teamsMessage = @"
            {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "${colorToUse}",
              "summary": "Build #${{github.run_number}}: ${messageToUse} - ${projectName}",
              "sections": [{
                "activityTitle": "# **Build #${{github.run_number}}: ${messageToUse}** - ***${projectName}***",
                "activitySubtitle": "GitHub Actions on ${{github.repository}}",
                "facts": [{
                  "name": "Commit hash:",
                  "value": "${{github.sha}}"
                }, {
                  "name": "Ref:",
                  "value": "${{github.ref}}"
                }, {
                  "name": "Build started by:",
                  "value": "${{github.actor}}"
                }],
                "markdown": true
              }],
              "potentialAction": [{
                  "@type": "OpenUri",
                  "name": "View This Run",
                  "targets": [{
                    "os": "default",
                    "uri": "${Env:GITHUB_SERVER_URL}/${{github.repository}}/actions/runs/${{github.run_id}}"
                  }]
                },
                {
                  "@type": "OpenUri",
                  "name": "View Commit",
                  "targets": [{
                    "os": "default",
                    "uri": "${Env:GITHUB_SERVER_URL}/${{github.repository}}/commit/${{github.sha}}"
                  }]
                }, {
                  "@type": "OpenUri",
                  "name": "GitHub Repo",
                  "targets": [{
                    "os": "default",
                    "uri": "${Env:GITHUB_SERVER_URL}/${{github.repository}}/"
                  }]
                }
              ]
            }
          "@
          
          Invoke-RestMethod -Method post -ContentType 'Application/Json' -Body $teamsMessage -Uri ${{ secrets.MSTEAMS_WEBHOOK_URL }}
